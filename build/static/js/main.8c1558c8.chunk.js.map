{"version":3,"sources":["services/api.js","js/tela_cadastro.js","js/App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","App","corpo","document","querySelector","useState","email","setEmail","senha","setSenha","event","a","preventDefault","post","password","enviate","console","log","alert","user","id","data","_id","localStorage","setItem","JSON","stringify","onload","parse","getItem","setAttribute","className","method","autoComplete","onSubmit","type","name","placeholder","value","onChange","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oRAMeA,E,OAJHC,EAAMC,OAAO,CACrBC,QAAS,wEC4EEC,MA3Ef,WACC,IAAIC,EAAQC,SAASC,cAAc,SADrB,EAEYC,mBAAS,IAFrB,mBAEPC,EAFO,KAEAC,EAFA,OAGOF,mBAAS,IAHhB,mBAGZG,EAHY,KAGLC,EAHK,iDAId,WAA4BC,GAA5B,iBAAAC,EAAA,6DACCD,EAAME,iBADP,SAEuBf,EAAIgB,KAAK,cAAe,CAAEP,QAAOQ,SAAUN,IAFlE,OAEOO,EAFP,OAGCC,QAAQC,IAAIF,GACZG,MAAM,cAAcZ,EAAM,gBAAgBE,GACtCW,EAAO,CACVb,QACAc,GAAIL,EAAQM,KAAKtB,OAAOoB,KAAKG,KAE9BN,QAAQC,IAAIF,EAAQM,KAAKtB,OAAOoB,MAChCI,aAAaC,QAAQ,OAAQC,KAAKC,UAAUP,IAV7C,4CAJc,sBA2Bd,OAHAjB,EAAMyB,OAAS,WAPHF,KAAKG,MAAML,aAAaM,QAAQ,WAElC1B,SAASC,cAAc,UAC7B0B,aAAa,QAAS,SACf3B,SAASC,cAAc,WAC7B0B,aAAa,QAAS,QAM1B,oCACC,yBAAKV,GAAG,SAASW,UAAU,OAC1B,uDAID,yBAAKX,GAAG,SACP,yBAAKA,GAAG,aACP,wBAAIA,GAAG,SAAP,gBAGA,0BACCA,GAAG,aACHY,OAAO,OACPC,aAAa,MACbC,SA3CS,6CA6CT,2BACCC,KAAK,QACLC,KAAK,QACLL,UAAU,YACVM,YAAY,mBACZC,MAAOhC,EACPiC,SAAU,SAAA7B,GAAK,OAAIH,EAASG,EAAM8B,OAAOF,UAE1C,6BACA,2BACCH,KAAK,WACLC,KAAK,QACLL,UAAU,YACVM,YAAY,0BACZC,MAAO9B,EACP+B,SAAU,SAAA7B,GAAK,OAAID,EAASC,EAAM8B,OAAOF,UAE1C,6BACA,2BACCH,KAAK,SACLJ,UAAU,cACVO,MAAM,sB,MCzDErC,MARf,WACE,OACE,yBAAK8B,UAAU,OACb,kBAAC,EAAD,QCIcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7C,SAAS8C,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.8c1558c8.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: \"https://4000-a7c42405-109c-4013-ade4-ee153e2c0421.ws-us02.gitpod.io\"\r\n});\r\n\r\nexport default api;","import React, { useState } from 'react';\r\nimport '../css/style_telacadastro.css';\r\nimport api from '../services/api';\r\n\r\nfunction App() {\r\n\tvar corpo = document.querySelector(\"#body\");\r\n\tconst [email, setEmail] = useState(''),\r\n\t\t[senha, setSenha] = useState('');\r\n\tasync function handleSubmit(event) {\r\n\t\tevent.preventDefault();\r\n\t\tconst enviate = await api.post(\"/createuser\", { email, password: senha });\r\n\t\tconsole.log(enviate);\r\n\t\talert(\"Seu email: \"+email+\"\\nSua senha: \"+senha);\r\n\t\tvar user = {\r\n\t\t\temail,\r\n\t\t\tid: enviate.data.create.user._id\r\n\t\t};\r\n\t\tconsole.log(enviate.data.create.user);\r\n\t\tlocalStorage.setItem(\"user\", JSON.stringify(user));\r\n\t}\r\n\tfunction load() {\r\n\t\tvar user = JSON.parse(localStorage.getItem(\"user\"));\r\n\t\tif(!user) return;\r\n\t\tvar te = document.querySelector(\"#teste\");\r\n\t\tte.setAttribute(\"class\", \"sumir\");\r\n\t\tvar log = document.querySelector(\"#logado\");\r\n\t\tlog.setAttribute(\"class\", \"on\");\r\n\t}\r\n\tcorpo.onload = function() {\r\n\t\tload();\r\n\t}\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div id=\"logado\" className=\"off\">\r\n\t\t\t\t<h1>\r\n\t\t\t\t\tVocê está logado\r\n\t\t\t\t</h1>\r\n\t\t\t</div>\r\n\t\t\t<div id=\"teste\">\r\n\t\t\t\t<div id=\"dashboard\">\r\n\t\t\t\t\t<h1 id=\"title\">\r\n\t\t\t\t\t\tCadastrar-se\r\n\t\t\t\t\t</h1>\r\n\t\t\t\t\t<form\r\n\t\t\t\t\t\tid=\"formulario\"\r\n\t\t\t\t\t\tmethod=\"POST\"\r\n\t\t\t\t\t\tautoComplete=\"off\"\r\n\t\t\t\t\t\tonSubmit={handleSubmit}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype=\"email\"\r\n\t\t\t\t\t\t\tname=\"email\"\r\n\t\t\t\t\t\t\tclassName=\"inputText\"\r\n\t\t\t\t\t\t\tplaceholder=\"Digite seu email\"\r\n\t\t\t\t\t\t\tvalue={email}\r\n\t\t\t\t\t\t\tonChange={event => setEmail(event.target.value)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\tname=\"senha\"\r\n\t\t\t\t\t\t\tclassName=\"inputText\"\r\n\t\t\t\t\t\t\tplaceholder=\"Digite uma senha segura\"\r\n\t\t\t\t\t\t\tvalue={senha}\r\n\t\t\t\t\t\t\tonChange={event => setSenha(event.target.value)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\tclassName=\"inputButton\"\r\n\t\t\t\t\t\t\tvalue=\"Cadastrar-se\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport Cadastro from './tela_cadastro';\r\n\r\nimport '../css/App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Cadastro />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './js/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}